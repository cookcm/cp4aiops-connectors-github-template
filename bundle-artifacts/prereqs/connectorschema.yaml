apiVersion: connectors.aiops.ibm.com/v1beta1
kind: ConnectorSchema
metadata:
  name: github-sample
  labels:
    tickets-connector: "true"
    notifications-connector: "true"
spec:
  categories:
    - events
    - tickets
  ceType: com.ibm.aiops.connectors.configuration
  components:
    - apiType: AsyncAPI
      name: connector
  documentation: >-
    https://www.ibm.com/docs/en/cloud-paks/cloud-pak-aiops
  permissions:
    channels:
      - name: cp4waiops-cartridge.lifecycle.input.events
        operations:
          - write
      - name: cp4waiops-cartridge.connector-snow-actions
        operations:
          - read
          - write
      - name: cp4waiops-cartridge.changerequest
        operations:
          - write
      - name: cp4waiops-cartridge.incident
        operations:
          - write
      - name: cp4waiops-cartridge.itsmincidentresponse
        operations:
          - write
      - name: cp4waiops-cartridge.problem
        operations:
          - write
      - name: cp4waiops-cartridge.snow-handlers
        operations:
          - read
      - name: cp4waiops-cartridge.lifecycle.input.connector-responses
        operations:
          - write
      - name: cp4waiops-cartridge.lifecycle.output.connector-requests
        operations:
          - read          
  encryptedFields:
    - /token          
  schema:
    allOf:
      - required:
          - url
          - owner
          - repo
          - token
          - username
    properties:
      token:
        format: secret
        type: string
      types:
        type: string
      url:
        type: string
      username:
        type: string
      owner:
        type: string
      repo:
        type: string
      issueSamplingRate:
        type: integer
      datasource_type:
        description: List of categories
        items:
          type: string
        type: array
      historical_config:
        additionalProperties: false
        properties:
          collectionMode:
            default: historical
            enum:
              - historical
            type: string
          start_date:
            format: date-time
            type: string
        required:
          - collectionMode
          - start_date
          - datasource_type
        type: object  
      mappingsGithub:
        description: The incident creation mappings
        type: string            
    type: object
  uiSchema:
    type: github-sample
    displayName: "Github Sample"
    iconFileType: svg
    categories: 
      - "{{connector.common.category.tickets}}"
    url: https://ibm.biz/int-github
    apiAdaptor: grpc
    datasourceType: tickets
    sidePanelTitle: "Github Sample"
    sidePanelDescription: "{{integrations.sidePanel.github.description}}"
    sidePanelInfoHeader: "{{integrations.sidePanel.github.information.header}}"
    sidePanelInfo:
      - "{{integrations.sidePanel.github.information.Row.1}}"
      - "{{integrations.sidePanel.github.information.Row.2}}"
      - "{{connector.github.form.username.label}}"
      - "{{connector.github.form.owner.label}}"
      - "{{connector.github.form.repo.label}}"
    hasOptionalConfig: true
    sidePanelOptionalConfigHeader: "{{sidePanel.optional.config.header}}"
    sidePanelOptionalConfigList:
      - "{{sidePanel.optional.config.fieldMappingSearch}}"
    hasOptionalText: false
    hasAIModelType: true
    isObserver: false
    deploymentType: ["local"]
    AIModelTypeList:
      - "{{sidePanel.AIModelTypes.similarIncidents}}"
    formSteps:
      - step:
          id: addConnection
          name: "{{formSteps.addConnection}}"
      - step:
          id: fieldMapping
          name: "{{formSteps.fieldMapping}}"
      - step:
          id: collectTickets
          name: "{{formSteps.collectTickets}}"
          isOptional: true
    form:
      - id: type
        element: input
        type: hiddenText
        apiMapping: connection_config.datasource_type
        formStep: addConnection
      - id: name
        element: input
        type: text
        label: "Name"
        placeholder: "Enter a name for this integration."
        apiMapping: connection_config.display_name
        formStep: addConnection
        isRequired: true
        maxCharLength: 50
        isDisabledOnUpdate: true
        isAlphanumeric: true
      - id: description
        element: input
        type: textarea
        label: "Description (optional)"
        placeholder: "Enter a description."
        apiMapping: connection_config.description
        formStep: addConnection
        maxCharLength: 600
      - id: url
        element: input
        type: text
        label: "URL of GitHub server"
        placeholder: "https://api.github.company.com"
        helperText: "If you have any restrictive EgressNetworkPolicies in place, please ensure that they are updated to allow for this outbound integration."
        apiMapping: connection_config.url
        formStep: addConnection
        isRequired: true
        isURL : true
      - id: token
        element: input
        type: password
        label: "Personal access token for GitHub server"
        placeholder: "Enter personal access token from GitHub"
        helperText: "This token will be used to authenticate your requests to access GitHub APIs. Ensure to select 'repo' with 'full control of private repositories' scope. The owner of the token should have 'write' access to the repository."
        apiMapping: connection_config.token
        formStep: addConnection
        isRequired: true
      - id: username
        element: input
        type: text
        label: "Username"
        placeholder: "Enter username from GitHub."
        apiMapping: connection_config.username
        formStep: addConnection
        maxCharLength: 600
        isRequired: true
      - id: owner
        element: input
        type: text
        label: "Owner or organization"
        placeholder: "Enter owner or organization of repository"
        apiMapping: connection_config.owner
        formStep: addConnection
        isRequired: true
      - id: repo
        element: input
        type: text
        label: "Repository"
        placeholder: "Enter repository (where the issues are created)"
        apiMapping: connection_config.repo
        formStep: addConnection
        isRequired: true
      - apiMapping: connection_config.deploymentType
        element: input
        formStep: addConnection
        id: orchestration
        type: hiddenText
        defaultValue: local
      - id: data_flow
        element: input
        type: toggle
        defaultToggled: false
        label: "Data collection"
        labelOff: "Off"
        labelOn: "On"
        headerLabel: "Define how ticket data is collected. Additional setup may be required before enabling data collection."
        headerLabelLink: https://ibm.biz/int-github
        apiMapping: connection_config.data_flow
        formStep: collectTickets
      - id: dynamic_schedule_form
        element: form
        label: "Mode"
        items: 
          - "Live - Continuous Similar Tickets training"
          - "Historical - Initial Similar Tickets training"
        itemKeys: ["live", "historical"]
        apiMapping: connection_config.collectionMode
        formStep: collectTickets
        form:
          - id: live
            rows:
              - id: issueSamplingRate
                element: input
                type: number
                label: "GitHub issue sampling rate (1-60 minutes)"
                min: 1
                max: 60
                step: 1
                defaultValue: 1
                helperText: "The frequency at which data is sampled for GitHub issues (in minutes). The default value is 1."
                apiMapping: connection_config.issueSamplingRate
                formStep: collectTickets
                isRequired: true
          - id: historical
            rows:
              - id: start
                element: input
                type: date
                label: "Start date"
                placeholder: "mm/dd/yyyy"
                apiMapping: connection_config.start
                helperText: "Select a date to retrieve closed GitHub issues since their last updated time. Choosing a date further back may result in more API calls to GitHub especially if there is a large volume of issues."
      - id: mappingsGithub
        element: input
        type: jsonata
        headerLabel: "You can use the default issue template as-is, or customize it to include different information. In addition to the fields included by default, you can also specify 'state' and 'assignees' for the incident. A title is required or the issue cannot be created. The owner of the token should have push access to the repository to set 'labels' and 'assignees' for new issues. Changes to 'labels' and 'assignees' are silently dropped if the user does not have push access to the repository."
        headerLabelLink: https://ibm.biz/int-github
        label:  "Incident created GitHub issue"
        isRequired: true
        apiMapping: connection_config.mappingsGithub
        formStep: fieldMapping
        defaultValue: |
          ({
              "title": $string(incident.title),
              "body": $join(["Incident Id:", $string(incident.id),
                             "\nAIOPS Incident Overview URL: https://", $string(URL_PREFIX), "/aiops/default/resolution-hub/incidents/all/", $string(incident.id), "/overview",
                             "\nStatus: ", $string(incident.state),
                             "\nDescription: ", $string(incident.description)]),
              "labels": [$join(["priority:", $string(incident.priority)])]
          })
